<?php

namespace Seedling\Commands;

use Seedling\Abstracts\ModelSeederAbstract;
use Seedling\Abstracts\TaxonomySeederAbstract;
use Seedling\ModelFields;
use WP_CLI;


class TaxonomySeederCommands

{
    protected TaxonomySeederAbstract $taxonomySeeder;

    protected string $taxonomyName;

    /**
     * @param ModelSeederAbstract $modelSeeder
     */
    public function __construct(TaxonomySeederAbstract $taxonomySeeder)
    {
        $this->taxonomySeeder = $taxonomySeeder;
        $this->taxonomyName = $this->taxonomySeeder->type();

        if (class_exists('WP_CLI')) {
            WP_CLI::add_command("seed create taxonomy $this->taxonomyName", array($this, 'create'));
            WP_CLI::add_command("seed clear taxonomy $this->taxonomyName", array($this, 'clear'));
            WP_CLI::add_command("seed list taxonomy $this->taxonomyName", array($this, 'list'));
        }
    }

    /**
     * Deletes taxonomies of this model
     *
     * ## OPTIONS
     *
     * [--force-clear-all]
     * : CAREFUL: add this tag to remove all terms of this taxonomy, even if they are not generated by this seeder.
     * I hope you know what you are doing.
     *
     * ## EXAMPLES
     * wp seed clear [my-term]
     * wp seed clear [my-term] --force-clear-all
     *
     * @when after_wp_load
     */
    function clear($args, $assoc_args)
    {
        WP_CLI::log("Clearing all terms.");
        if (isset($assoc_args['force-clear-all'])) {
            $this->deleteAllTerms();
        } else {
            $this->deleteOnlyAllSeededTerms();
        }

        WP_CLI::success("Done. Exiting");
    }


    /**
     * Creates a ter, for this taxonomy
     *
     * ## OPTIONS
     *
     * [--limit=<amount>]
     * : amount of items created, defaults to 1
     *
     * [--fresh]
     * : add this tag to remove previously set terms created with this seeder, manually created terms will not be deleted
     *
     * [--f]
     * : identical to --fresh
     *
     * [--freshforce]
     * : add this tag to remove all terms of this taxonomy
     *
     * [--ff]
     * : identical to --freshforce
     *
     * [--allow-empty-values]
     * : When this flag is added, when seeding blocks, the field inputs have a 50% chance to be empty. This can be used to
     *  test user input. This flag respects the required setting in the field.
     *
     * ## EXAMPLES
     * wp seed create taxonomy [your-taxonomy]
     * wp seed create taxonomy [your-taxonomy] --limit=5 --fresh
     * wp seed create taxonomy [your-taxonomy] --limit=25 --freshforce
     * wp seed create taxonomy [your-taxonomy] --limit=25 --freshforce --allow-empty-values
     *
     * @when after_wp_load
     */
    function create($args, $assoc_args)
    {
        if (class_exists('WP_CLI')) {
            $progress = WP_CLI\Utils\make_progress_bar("", $assoc_args['limit'] ?? 1);

            if (isset($assoc_args['fresh']) || isset($assoc_args['f'])) {
                $this->deleteOnlyAllSeededTerms();
            }

            if (isset($assoc_args['freshforce']) || isset($assoc_args['ff'])) {
                $this->deleteAllTerms();
            }

            for ($i = 0; $i < $assoc_args['limit'] ?? 1; $i++) {
                $this->taxonomySeeder->seedTerm();
                $progress->tick();
            }
            $progress->finish();

        }
    }

    private function deleteOnlyAllSeededTerms()
    {
        $terms = get_terms([
            'taxonomy' => $this->taxonomySeeder->type(),
            'hide_empty' => false,
            'meta_query' => [
                [
                    'key' => '_seedling_seeded',
                    'value' => 1,
                    'compare' => 'LIKE'
                ]
            ]
        ]);
        foreach ($terms as $term) {
            wp_delete_term($term->term_id, $this->taxonomySeeder->type());
        }

        WP_CLI::log("Deleted All previously seeded " . $this->taxonomySeeder->type() . " terms...");
    }

    private function deleteAllTerms()
    {
        $terms = get_terms([
            'taxonomy' => $this->taxonomySeeder->type(),
            'hide_empty' => false,
        ]);

        foreach ($terms as $term) {
            wp_delete_term($term->term_id, $this->taxonomySeeder->type());
        }

        WP_CLI::log("Deleted All " . $this->taxonomySeeder->type() . " terms...");
    }

    /**
     * Retrieves all attributes related to this model
     *
     * @when after_wp_load
     */
    function list($args, $assoc_args)
    {
        $type = $this->taxonomySeeder->type();
        $fields = ModelFields::getFieldGroupsByTaxonomy($type);

        if (!$fields || count($fields) == 0) {
            WP_CLI::error("No fields found for $type");
            return;
        }

        foreach ($fields as $field) {
            $fieldName = $field['name'] ?? "";
            $fieldType = $field['type'] ?? "";
            WP_CLI::log("fieldname: $fieldName, fieldtype: $fieldType");
        }
    }
}
